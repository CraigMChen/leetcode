package ac2

import "math/rand"

// 对解法1的优化
// 调用两次 rand7 并相乘的结果落在 40 以内时直接返回
// 若结果大于 40，即结果为 [41,49] 范围内的 9 个数，把他们减去 40，变为 [1,9]
// 再调用一次 rand7，两数相乘，得到结果为 [1,63] 范围内的数
// 若结果落在 60 以内，则用上面类似的方式直接返回
// 否则结果大于 60，即在 [61,63] 范围内，把他们减去 60，变为 [1,3]
// 再调用一次 rand7，两数相乘，得到结果为 [1,21] 范围内的数
// 若结果落在 20 以内，则用上面类似的方式直接返回
// 否则结果为 21，此时直接放弃，重新走一遍上面的流程
// 期望时间复杂度 O(1)，最差为 O(♾️)
// 空间复杂度 O(1)
// rand10 期望调用次数 2.193
func rand10() int {
	for {
		x1 := rand7()
		x2 := rand7()
		n := (x1-1)*7 + x2
		if n <= 40 {
			return 1 + (n-1)%10
		}
		x1 = n - 40
		x2 = rand7()
		n = (x1-1)*7 + x2
		if n <= 60 {
			return 1 + (n-1)%10
		}
		x1 = n - 60
		x2 = rand7()
		n = (x1-1)*7 + x2
		if n <= 20 {
			return 1 + (n-1)%10
		}
	}
}

func rand7() int {
	return rand.Intn(7)
}
